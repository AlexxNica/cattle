/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.ImageRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ImageTable extends TableImpl<ImageRecord> {

    private static final long serialVersionUID = -482894506;

    /**
     * The reference instance of <code>cattle.image</code>
     */
    public static final ImageTable IMAGE = new ImageTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImageRecord> getRecordType() {
        return ImageRecord.class;
    }

    /**
     * The column <code>cattle.image.id</code>.
     */
    public final TableField<ImageRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.image.name</code>.
     */
    public final TableField<ImageRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.image.account_id</code>.
     */
    public final TableField<ImageRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.image.kind</code>.
     */
    public final TableField<ImageRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.image.uuid</code>.
     */
    public final TableField<ImageRecord, String> UUID = createField("uuid", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.image.description</code>.
     */
    public final TableField<ImageRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

    /**
     * The column <code>cattle.image.state</code>.
     */
    public final TableField<ImageRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.image.created</code>.
     */
    public final TableField<ImageRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.image.removed</code>.
     */
    public final TableField<ImageRecord, Date> REMOVED = createField("removed", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.image.remove_time</code>.
     */
    public final TableField<ImageRecord, Date> REMOVE_TIME = createField("remove_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.image.data</code>.
     */
    public final TableField<ImageRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.image.url</code>.
     */
    public final TableField<ImageRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.image.is_public</code>.
     */
    public final TableField<ImageRecord, Boolean> IS_PUBLIC = createField("is_public", org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * The column <code>cattle.image.physical_size_mb</code>.
     */
    public final TableField<ImageRecord, Long> PHYSICAL_SIZE_MB = createField("physical_size_mb", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.image.virtual_size_mb</code>.
     */
    public final TableField<ImageRecord, Long> VIRTUAL_SIZE_MB = createField("virtual_size_mb", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.image.checksum</code>.
     */
    public final TableField<ImageRecord, String> CHECKSUM = createField("checksum", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.image.format</code>.
     */
    public final TableField<ImageRecord, String> FORMAT = createField("format", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.image.instance_kind</code>.
     */
    public final TableField<ImageRecord, String> INSTANCE_KIND = createField("instance_kind", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.image.registry_credential_id</code>.
     */
    public final TableField<ImageRecord, Long> REGISTRY_CREDENTIAL_ID = createField("registry_credential_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cattle.image</code> table reference
     */
    public ImageTable() {
        this("image", null);
    }

    /**
     * Create an aliased <code>cattle.image</code> table reference
     */
    public ImageTable(String alias) {
        this(alias, IMAGE);
    }

    private ImageTable(String alias, Table<ImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private ImageTable(String alias, Table<ImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ImageRecord, Long> getIdentity() {
        return Keys.IDENTITY_IMAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ImageRecord> getPrimaryKey() {
        return Keys.KEY_IMAGE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ImageRecord>> getKeys() {
        return Arrays.<UniqueKey<ImageRecord>>asList(Keys.KEY_IMAGE_PRIMARY, Keys.KEY_IMAGE_IDX_IMAGE_UUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ImageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ImageRecord, ?>>asList(Keys.FK_IMAGE__ACCOUNT_ID, Keys.FK_IMAGE_REGISTRY_CREDENTIAL_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ImageTable as(String alias) {
        return new ImageTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ImageTable rename(String name) {
        return new ImageTable(name, null);
    }
}
